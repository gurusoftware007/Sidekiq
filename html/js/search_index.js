var search_data = {"index":{"searchIndex":["sidekiq","client","deadset","jobrecord","jobset","process","processset","queue","retryset","scheduledset","sortedentry","sortedset","stats","history","queues","workset","worker","classmethods","options","classmethods","setter","delay()","delay_for()","delay_until()","enqueue()","enqueue_in()","enqueue_to()","enqueue_to_in()","included()","included()","logger()","middleware()","new()","new()","perform_async()","perform_async()","perform_at()","perform_at()","perform_bulk()","perform_bulk()","perform_in()","perform_in()","perform_inline()","perform_inline()","perform_sync()","perform_sync()","push()","push()","push_bulk()","push_bulk()","queue_as()","set()","set()","sidekiq_class_attribute()","sidekiq_options()","sidekiq_options()","sidekiq_retries_exhausted()","sidekiq_retry_in()","via()","rdoc"],"longSearchIndex":["sidekiq","sidekiq::client","sidekiq::deadset","sidekiq::jobrecord","sidekiq::jobset","sidekiq::process","sidekiq::processset","sidekiq::queue","sidekiq::retryset","sidekiq::scheduledset","sidekiq::sortedentry","sidekiq::sortedset","sidekiq::stats","sidekiq::stats::history","sidekiq::stats::queues","sidekiq::workset","sidekiq::worker","sidekiq::worker::classmethods","sidekiq::worker::options","sidekiq::worker::options::classmethods","sidekiq::worker::setter","sidekiq::worker::classmethods#delay()","sidekiq::worker::classmethods#delay_for()","sidekiq::worker::classmethods#delay_until()","sidekiq::client::enqueue()","sidekiq::client::enqueue_in()","sidekiq::client::enqueue_to()","sidekiq::client::enqueue_to_in()","sidekiq::worker::included()","sidekiq::worker::options::included()","sidekiq::worker#logger()","sidekiq::client#middleware()","sidekiq::client::new()","sidekiq::worker::setter::new()","sidekiq::worker::classmethods#perform_async()","sidekiq::worker::setter#perform_async()","sidekiq::worker::classmethods#perform_at()","sidekiq::worker::setter#perform_at()","sidekiq::worker::classmethods#perform_bulk()","sidekiq::worker::setter#perform_bulk()","sidekiq::worker::classmethods#perform_in()","sidekiq::worker::setter#perform_in()","sidekiq::worker::classmethods#perform_inline()","sidekiq::worker::setter#perform_inline()","sidekiq::worker::classmethods#perform_sync()","sidekiq::worker::setter#perform_sync()","sidekiq::client#push()","sidekiq::client::push()","sidekiq::client::push_bulk()","sidekiq::client#push_bulk()","sidekiq::worker::classmethods#queue_as()","sidekiq::worker::classmethods#set()","sidekiq::worker::setter#set()","sidekiq::worker::options::classmethods#sidekiq_class_attribute()","sidekiq::worker::classmethods#sidekiq_options()","sidekiq::worker::options::classmethods#sidekiq_options()","sidekiq::worker::options::classmethods#sidekiq_retries_exhausted()","sidekiq::worker::options::classmethods#sidekiq_retry_in()","sidekiq::client::via()",""],"info":[["Sidekiq","","Sidekiq.html","",""],["Sidekiq::Client","","Sidekiq/Client.html","",""],["Sidekiq::DeadSet","","Sidekiq/DeadSet.html","",""],["Sidekiq::JobRecord","","Sidekiq/JobRecord.html","",""],["Sidekiq::JobSet","","Sidekiq/JobSet.html","",""],["Sidekiq::Process","","Sidekiq/Process.html","",""],["Sidekiq::ProcessSet","","Sidekiq/ProcessSet.html","",""],["Sidekiq::Queue","","Sidekiq/Queue.html","",""],["Sidekiq::RetrySet","","Sidekiq/RetrySet.html","",""],["Sidekiq::ScheduledSet","","Sidekiq/ScheduledSet.html","",""],["Sidekiq::SortedEntry","","Sidekiq/SortedEntry.html","",""],["Sidekiq::SortedSet","","Sidekiq/SortedSet.html","",""],["Sidekiq::Stats","","Sidekiq/Stats.html","",""],["Sidekiq::Stats::History","","Sidekiq/Stats/History.html","",""],["Sidekiq::Stats::Queues","","Sidekiq/Stats/Queues.html","",""],["Sidekiq::WorkSet","","Sidekiq/WorkSet.html","",""],["Sidekiq::Worker","","Sidekiq/Worker.html","","<p>Include this module in your worker class and you can easily create\nasynchronous jobs:\n\n<pre>class HardWorker ...</pre>\n"],["Sidekiq::Worker::ClassMethods","","Sidekiq/Worker/ClassMethods.html","",""],["Sidekiq::Worker::Options","","Sidekiq/Worker/Options.html","","<p>The Options module is extracted so we can include it in ActiveJob::Base and\nallow native AJs to configure …\n"],["Sidekiq::Worker::Options::ClassMethods","","Sidekiq/Worker/Options/ClassMethods.html","",""],["Sidekiq::Worker::Setter","","Sidekiq/Worker/Setter.html","","<p>This helper class encapsulates the set options for `set`, e.g.\n\n<pre>SomeWorker.set(queue: &#39;foo&#39;).perform_async(....)</pre>\n"],["delay","Sidekiq::Worker::ClassMethods","Sidekiq/Worker/ClassMethods.html#method-i-delay","(*args)",""],["delay_for","Sidekiq::Worker::ClassMethods","Sidekiq/Worker/ClassMethods.html#method-i-delay_for","(*args)",""],["delay_until","Sidekiq::Worker::ClassMethods","Sidekiq/Worker/ClassMethods.html#method-i-delay_until","(*args)",""],["enqueue","Sidekiq::Client","Sidekiq/Client.html#method-c-enqueue","(klass, *args)","<p>Resque compatibility helpers.  Note all helpers should go through\nSidekiq::Job#client_push.\n<p>Example usage: …\n"],["enqueue_in","Sidekiq::Client","Sidekiq/Client.html#method-c-enqueue_in","(interval, klass, *args)","<p>Example usage:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Sidekiq</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Client</span>.<span class=\"ruby-identifier\">enqueue_in</span>(<span class=\"ruby-value\">3</span>.<span class=\"ruby-identifier\">minutes</span>, <span class=\"ruby-constant\">MyJob</span>, <span class=\"ruby-string\">&#39;foo&#39;</span>, <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">:bat</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-string\">&#39;bar&#39;</span>)\n</pre>\n"],["enqueue_to","Sidekiq::Client","Sidekiq/Client.html#method-c-enqueue_to","(queue, klass, *args)","<p>Example usage:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Sidekiq</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Client</span>.<span class=\"ruby-identifier\">enqueue_to</span>(<span class=\"ruby-value\">:queue_name</span>, <span class=\"ruby-constant\">MyJob</span>, <span class=\"ruby-string\">&#39;foo&#39;</span>, <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">:bat</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-string\">&#39;bar&#39;</span>)\n</pre>\n"],["enqueue_to_in","Sidekiq::Client","Sidekiq/Client.html#method-c-enqueue_to_in","(queue, interval, klass, *args)","<p>Example usage:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Sidekiq</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Client</span>.<span class=\"ruby-identifier\">enqueue_to_in</span>(<span class=\"ruby-value\">:queue_name</span>, <span class=\"ruby-value\">3</span>.<span class=\"ruby-identifier\">minutes</span>, <span class=\"ruby-constant\">MyJob</span>, <span class=\"ruby-string\">&#39;foo&#39;</span>, <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">:bat</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-string\">&#39;bar&#39;</span>)\n</pre>\n"],["included","Sidekiq::Worker","Sidekiq/Worker.html#method-c-included","(base)",""],["included","Sidekiq::Worker::Options","Sidekiq/Worker/Options.html#method-c-included","(base)",""],["logger","Sidekiq::Worker","Sidekiq/Worker.html#method-i-logger","()",""],["middleware","Sidekiq::Client","Sidekiq/Client.html#method-i-middleware","(&block)","<p>Define client-side middleware:\n\n<pre>client = Sidekiq::Client.new\nclient.middleware do |chain|\n  chain.use MyClientMiddleware ...</pre>\n"],["new","Sidekiq::Client","Sidekiq/Client.html#method-c-new","(redis_pool = nil)","<p>Sidekiq::Client normally uses the default Redis pool but you may pass a\ncustom ConnectionPool if you …\n"],["new","Sidekiq::Worker::Setter","Sidekiq/Worker/Setter.html#method-c-new","(klass, opts)",""],["perform_async","Sidekiq::Worker::ClassMethods","Sidekiq/Worker/ClassMethods.html#method-i-perform_async","(*args)",""],["perform_async","Sidekiq::Worker::Setter","Sidekiq/Worker/Setter.html#method-i-perform_async","(*args)",""],["perform_at","Sidekiq::Worker::ClassMethods","Sidekiq/Worker/ClassMethods.html#method-i-perform_at","(interval, *args)",""],["perform_at","Sidekiq::Worker::Setter","Sidekiq/Worker/Setter.html#method-i-perform_at","(interval, *args)",""],["perform_bulk","Sidekiq::Worker::ClassMethods","Sidekiq/Worker/ClassMethods.html#method-i-perform_bulk","(*args, **kwargs)","<p>Push a large number of jobs to Redis, while limiting the batch of each job\npayload to 1,000. This method …\n"],["perform_bulk","Sidekiq::Worker::Setter","Sidekiq/Worker/Setter.html#method-i-perform_bulk","(args, batch_size: 1_000)",""],["perform_in","Sidekiq::Worker::ClassMethods","Sidekiq/Worker/ClassMethods.html#method-i-perform_in","(interval, *args)","<p><code>interval</code> must be a timestamp, numeric or something that acts\n\n<pre>numeric (like an activesupport time interval).</pre>\n"],["perform_in","Sidekiq::Worker::Setter","Sidekiq/Worker/Setter.html#method-i-perform_in","(interval, *args)","<p><code>interval</code> must be a timestamp, numeric or something that acts\n\n<pre>numeric (like an activesupport time interval).</pre>\n"],["perform_inline","Sidekiq::Worker::ClassMethods","Sidekiq/Worker/ClassMethods.html#method-i-perform_inline","(*args)","<p>Inline execution of job&#39;s perform method after passing through\nSidekiq.client_middleware and Sidekiq.server_middleware …\n"],["perform_inline","Sidekiq::Worker::Setter","Sidekiq/Worker/Setter.html#method-i-perform_inline","(*args)","<p>Explicit inline execution of a job. Returns nil if the job did not execute,\ntrue otherwise.\n"],["perform_sync","Sidekiq::Worker::ClassMethods","Sidekiq/Worker/ClassMethods.html#method-i-perform_sync","(*args)",""],["perform_sync","Sidekiq::Worker::Setter","Sidekiq/Worker/Setter.html#method-i-perform_sync","(*args)",""],["push","Sidekiq::Client","Sidekiq/Client.html#method-i-push","(item)","<p>The main method used to push a job to Redis.  Accepts a number of options:\n\n<pre>queue - the named queue to ...</pre>\n"],["push","Sidekiq::Client","Sidekiq/Client.html#method-c-push","(item)",""],["push_bulk","Sidekiq::Client","Sidekiq/Client.html#method-c-push_bulk","(items)",""],["push_bulk","Sidekiq::Client","Sidekiq/Client.html#method-i-push_bulk","(items)","<p>Push a large number of jobs to Redis. This method cuts out the redis\nnetwork round trip latency.  I wouldn&#39;t …\n"],["queue_as","Sidekiq::Worker::ClassMethods","Sidekiq/Worker/ClassMethods.html#method-i-queue_as","(q)",""],["set","Sidekiq::Worker::ClassMethods","Sidekiq/Worker/ClassMethods.html#method-i-set","(options)",""],["set","Sidekiq::Worker::Setter","Sidekiq/Worker/Setter.html#method-i-set","(options)",""],["sidekiq_class_attribute","Sidekiq::Worker::Options::ClassMethods","Sidekiq/Worker/Options/ClassMethods.html#method-i-sidekiq_class_attribute","(*attrs)",""],["sidekiq_options","Sidekiq::Worker::ClassMethods","Sidekiq/Worker/ClassMethods.html#method-i-sidekiq_options","(opts = {})","<p>Allows customization for this type of Worker. Legal options:\n\n<pre>queue - use a named queue for this Worker, ...</pre>\n"],["sidekiq_options","Sidekiq::Worker::Options::ClassMethods","Sidekiq/Worker/Options/ClassMethods.html#method-i-sidekiq_options","(opts = {})","<p>Allows customization for this type of Worker. Legal options:\n\n<pre>queue - name of queue to use for this job ...</pre>\n"],["sidekiq_retries_exhausted","Sidekiq::Worker::Options::ClassMethods","Sidekiq/Worker/Options/ClassMethods.html#method-i-sidekiq_retries_exhausted","(&block)",""],["sidekiq_retry_in","Sidekiq::Worker::Options::ClassMethods","Sidekiq/Worker/Options/ClassMethods.html#method-i-sidekiq_retry_in","(&block)",""],["via","Sidekiq::Client","Sidekiq/Client.html#method-c-via","(pool)","<p>Allows sharding of jobs across any number of Redis instances.  All jobs\ndefined within the block will …\n"],["rdoc","","docs/rdoc_rdoc.html","",""]]}}